{"mappings":"oeAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,SCAAE,EAAAF,EAAA,SAEO,SAASG,GAAqBC,MACnCA,EAAKC,aACLA,EAAYC,cACZA,EAAaC,YACbA,EAAWC,UACXA,EAASC,aACTA,EAAYC,WACZA,EAAUC,WACVA,EAAUC,SACVA,IAEA,MAAO,+JAMqDN,gIACFA,8HACAC,yFACNA,oLASdH,qTAScC,oSAQOI,0FAEHE,+SAUTD,kOAOA,EAAAR,EAAAW,WAAUL,mMAStBI,sG,0EDjErC,MAAME,EAAY,IAAI,EAAAb,EAAAc,WAChBC,EAAgBC,SAASC,cAAc,iBAGxC,EAALC,EAAAC,aACA,EAAAD,EAAAE,cAEAC,iBACE,IACE,MAEMC,SAFgBT,EAAUU,uBAEJC,QAGD,IAAvBC,EAAgB,GACpB,MAAMC,EAAeC,GAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAElE,KAA+B,GAAxBF,EAAcM,QAAa,CAChC,IAAIC,EAAQN,EAAaJ,EAAYS,QACrCN,EAAcQ,KAAKX,EAAYU,IAC/BP,EAAgBA,EAAcS,QAAO,CAACC,EAAGC,EAAGC,IAAQA,EAAIC,QAAQH,IAAMC,G,CAGxE,MAAMG,EAASd,EAAce,QAC3B,CAACC,EAAQC,IAAkBD,EAoBjC,UAAsBtC,MACpBA,EAAKC,aACLA,EAAYE,YACZA,EAAWC,UACXA,EAASC,aACTA,IAEA,MAAO,4PAK6CL,yIAEQ,EAAAF,EAAAW,WACpCL,QACKH,EAAauC,MAAM,EAAG,qEACM,EAAAC,EAAAC,gBACjCrC,yKAMgCF,gCAC/BH,4L,CA7Ce2C,CAAaJ,IACjD,IAekBD,EAVLF,EAWjBxB,EAAcgC,UAAYN,C,CARxB,MAAOO,GACPC,QAAQC,IAAIF,E,CAMhB,IAAwBP,C,CAHxBU,GA6CgB,MAAVC,EAAepC,SAASC,cAAc,oBAE5CI,iBACE,IACE,MAGMgC,SAHwBxC,EAAUyC,oBAGC9B,QAIzC,IAAK6B,EACH,OAAOE,MACL,iEAKuB,IAAvBC,EAAiB,GAGrB,MAAMC,EAAgB9B,GAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAEnE,KAAgC,GAAzB6B,EAAezB,QAAa,CACjC,IAAIC,EAAQyB,EAAcJ,EAAiBtB,QAC3CyB,EAAevB,KAAKoB,EAAiBrB,IACrCwB,EAAiBA,EAAetB,QAC9B,CAACC,EAAGC,EAAGC,IAAQA,EAAIC,QAAQH,IAAMC,G,CAIrC,MAAMsB,EAAiBF,EAAehB,QACpC,CAACC,EAAQkB,IAAmBlB,EAASvC,EAAqByD,IAC1D,IAyBmBlB,EAtBLiB,EAuBlBN,EAAaL,UAAYN,EApBwD,MAAzEmB,EAAcJ,EAAe,GAEfxC,SAASC,cAAc,iBAC/B4C,iBAAiB,SAAS,YACpC,EAAAC,EAAAC,cAAaH,E,IAOf,MAAOZ,GACPC,QAAQC,IAAIF,E,CAOhB,IAAyBP,C,CAHzBuB,G","sources":["src/index.js","src/js/homeWeekly.js","src/js/catalog-functions/upcoming-markup.js"],"sourcesContent":["import './js/color-theme';\nimport './js/hero';\nimport './js/homeWeekly';\nimport './js/homeUpcoming';\nimport './js/modal';\nimport './js/mobile-menu';\nimport './js/movie-card';\nimport './js/spiner';\n","import { MoviesAPI } from './MoviesAPI';\n// import { createMovies } from '/src/js/catalog-functions/weekly-markup';\nimport { createUpcomingMovies } from '/src/js/catalog-functions/upcoming-markup';\nimport { onScroll, onToTopBtn } from './scroll';\nimport { addAndRemoveToLocalStorage } from './localStorage';\nimport { openModalMovie } from './modal-window/modal-movie';\nimport { addToLibrary } from './modal-window/add-to-library';\n\nimport { getGenres } from './catalog-functions/catalog-genres-get';\nimport { getStarsRating } from './catalog-functions/catalog-rating-get';\n\nconst moviesAPI = new MoviesAPI();\nconst weeklyGallery = document.querySelector('.weekly-list');\n\n// скрол\nonScroll();\nonToTopBtn();\n\nasync function onRenderPage() {\n  try {\n    const respons = await moviesAPI.getTrendMoviesWeeks();\n\n    const responsData = respons.results;\n\n    //  отримуємо три рамдомних фільми\n    let responsMovies = [];\n    const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\n\n    while (responsMovies.length != 3) {\n      let index = getRandomInt(responsData.length);\n      responsMovies.push(responsData[index]);\n      responsMovies = responsMovies.filter((v, i, arr) => arr.indexOf(v) == i);\n    }\n\n    const markup = responsMovies.reduce(\n      (markup, responsMovies) => markup + createMovies(responsMovies),\n      ''\n    );\n\n    // console.log(markup.length);\n\n    updateNewsList(markup);\n    // скрол\n    // scrollPage();\n  } catch (err) {\n    console.log(err);\n  }\n}\nonRenderPage();\n// console.log(onRenderPage());\n\nfunction updateNewsList(markup) {\n  weeklyGallery.innerHTML = markup;\n}\n\nfunction createMovies({\n  title,\n  release_date,\n  poster_path,\n  genre_ids,\n  vote_average,\n}) {\n  return `\n    <li class='catalog-list__item'>\n        <a href='#' class='catalog-list__list-link'>\n            <div class='catalog-list__list-wrapper'>\n                <div class='catalog-list__info'>\n                    <h2 class='catalog-list__title'>${title}</h2>\n                    <div class='catalog-list__additional-info'>\n                        <p class='catalog-list__movie-type'>${getGenres(\n                          genre_ids\n                        )} | ${release_date.slice(0, 4)}</p>\n                        <div class='catalog-list-rating'>${getStarsRating(\n                          vote_average\n                        )}\n                        </div>\n                    </div>\n                </div>\n                <img\n                    src='https://image.tmdb.org/t/p/w500${poster_path}'\n                    alt='${title}'\n                    width='280'\n                    height='406'\n                    class='catalog-list__image'\n                />\n            </div>\n        </a>\n    </li> \n`;\n}\n\n// ===секція \"нові фільми\"===\n\nconst upcomingCard = document.querySelector('.upcoming-cover');\n\nasync function onRenderNewMovie() {\n  try {\n    const responsNewMovie = await moviesAPI.getUpcomingFilms();\n    // console.log(respons);\n\n    const responsDataMovie = responsNewMovie.results;\n    // console.log(responsDataMovie);\n    // console.log(responsData.length);\n\n    if (!responsDataMovie) {\n      return alert(\n        'Вибачте! Нових фільмів не знайдено/Sorry! No new movies found'\n      );\n    }\n\n    // отримуємо один рамдомний фільм\n    let randomNewMovie = [];\n    // console.log(randomNewMovie);\n\n    const getRandomFilm = max => Math.floor(Math.random() * Math.floor(max));\n\n    while (randomNewMovie.length != 1) {\n      let index = getRandomFilm(responsDataMovie.length);\n      randomNewMovie.push(responsDataMovie[index]);\n      randomNewMovie = randomNewMovie.filter(\n        (v, i, arr) => arr.indexOf(v) == i\n      );\n    }\n\n    const markupNewMovie = randomNewMovie.reduce(\n      (markup, randomNewMovie) => markup + createUpcomingMovies(randomNewMovie),\n      ''\n    );\n\n    updateNewMovies(markupNewMovie);\n\n    // Додаємо слухача на кнопку Remind me і при кліку на цю кнопку викликаємо функцію addToLibrary (запис в локальне сховище)\n    const movieObject = randomNewMovie[0];\n    // console.log(randomNewMovie[0]);\n    const remindMeBtn = document.querySelector('.upcoming-btn');\n    remindMeBtn.addEventListener('click', function () {\n      addToLibrary(movieObject);\n    });\n\n    // }, 2000);\n\n    // скрол\n    // scrollPage();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nonRenderNewMovie();\n// console.log(onRenderPage());\n\nfunction updateNewMovies(markup) {\n  upcomingCard.innerHTML = markup;\n}\n\n//скрол\n// function scrollPage() {\n//   const { height: cardHeight } = document\n//     .querySelector('.main')\n//     .firstElementChild.getBoundingClientRect();\n\n//   window.scrollBy({\n//     top: cardHeight * 1,\n//     behavior: 'smooth',\n//   });\n// }\n","import { getGenres } from './catalog-genres-get';\n\nexport function createUpcomingMovies({\n  title,\n  release_date,\n  backdrop_path,\n  poster_path,\n  genre_ids,\n  vote_average,\n  popularity,\n  vote_count,\n  overview,\n}) {\n  return `\n\n    <a href=\"#\">\n    <div class=\"upcoming-img\">\n\n     <picture class='upcoming-images'>\n        <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 1200px)\" class='upcoming-images-desktop' />\n      <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 768px)\" class='upcoming-images-tablet' />\n      <source srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\" media=\"(min-width: 480px)\" />\n      <img src=\"https://image.tmdb.org/t/p/original/${poster_path}\" alt=\"Movie Poster\" class=\"upcoming-image\"/>\n      \n    </picture>\n\n    </div>\n  </a>\n\n  <div class=\"upcoming-info-cover\">\n    \n      <h2 class=\"upcoming-info-title\">${title}</h2>\n\n    <div class=\"upcoming-info\">\n\n      <div class=\"info-box-r\">\n        <ul class=\"upcoming-info-list\">\n          <li class=\"list-info\">\n            <ul class=\"info-list\">\n              <li class=\"upcoming-list__title\">Release date</li>\n              <li class=\"upcoming-list__value-data\">${release_date}</li>\n            </ul>\n          <li>\n\n          <li class=\"list-info\">\n            <ul class=\"info-list\">\n              <li class=\"upcoming-list__title\">Vote / Votes</li>\n              <li class=\"upcoming-list__value\">\n                <span class=\"upcoming-value-text averange\">${vote_average}</span>\n                  /\n                <span class=\"upcoming-value-text count\">${vote_count}</span>\n              </li>\n            </ul>\n          </li>\n        </div>\n\n        <div class=\"info-box-l\">\n          <li class=\"list-info\">\n            <ul class=\"info-list\">\n              <li class=\"upcoming-list__title\">Popularity</li>\n              <li class=\"upcoming-list__value\">${popularity}</li>\n            </ul>\n          </li>\n\n          <li class=\"list-info\">\n            <ul class=\"info-list\">\n              <li class=\"upcoming-list__title\">Genre</li>\n              <li class=\"upcoming-list__value\">${getGenres(genre_ids)}</li>\n            <ul>\n          <li>\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"movie-info\">\n      <h2 class=\"info-title\">About</h2>\n      <p class=\"movie-description\">${overview}</p>\n    </div>\n\n    <button type=\"button\" class=\"upcoming-btn\">Remind me</button>\n  </div>\n\n`;\n}\n\n// function changeUpcomingImg(BGI) {\n//   // перевіряємо ширину екрану при завантаженні сторінки та додаємо відповідний фон\n//   if (window.matchMedia('(min-width: 1280px)').matches) {\n//     refs.hero.style.backgroundImage = `url('${SubtractDesktopDark}'), url('${BGI}')`;\n//   } else if (window.matchMedia('(min-width: 768px)').matches) {\n//     refs.hero.style.backgroundImage = `url('${SubtractTabletDark}'), url('${BGI}')`;\n//   } else {\n//     refs.hero.style.backgroundImage = `linear-gradient(\n//       87.8deg,\n//       #0e0e0e 15.61%,\n//       rgba(14, 14, 14, 0) 60.39%\n//     ), url('${BGI}')`;\n//   }\n\n//   // Відслуховуємо зміну ширини сторінки...\n//   window.addEventListener('resize', onResizePageWidth);\n//   // ... та змінюємо на відповідний фон при зміні ширини екрану\n//   function onResizePageWidth(events) {\n//     const currentPageWidth = events.currentTarget.innerWidth;\n//     if (currentPageWidth >= 1280) {\n//       refs.hero.style.backgroundImage = `url('${SubtractDesktopDark}'), url('${BGI}')`;\n//     } else if (currentPageWidth >= 768) {\n//       refs.hero.style.backgroundImage = `url('${SubtractTabletDark}'), url('${BGI}')`;\n//     } else if (currentPageWidth < 768) {\n//       refs.hero.style.backgroundImage = `linear-gradient(\n//       87.8deg,\n//       #0e0e0e 15.61%,\n//       rgba(14, 14, 14, 0) 60.39%\n//     ), url('${BGI}')`;\n//     }\n//   }\n// }\n\n// {\n/* <img\n  src=\"https://image.tmdb.org/t/p/w500${backdrop_path}\"\n  alt=\"${title}\"\n  loading=\"lazy\"\n  class=\"upcoming-image\"\n/> */\n// }\n\n// {\n/* <img\n  src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n  alt=\"Movie Poster\"\n  style=\"width: 805px\"\n/>; */\n// }\n\n// {\n/* <source srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\" media=\"(min-width: 320px)\" />\n      <img srcset=\"https://image.tmdb.org/t/p/original/${\n        (backdrop_path, poster_path)\n      }\"  style='width: 280px'/> */\n// }\n"],"names":["parcelRequire","$jtGqB","$horRP","$8af409f73f28603b$export$39924141b8e936a4","title","release_date","backdrop_path","poster_path","genre_ids","vote_average","popularity","vote_count","overview","getGenres","$0015b29ca7009732$var$moviesAPI","MoviesAPI","$0015b29ca7009732$var$weeklyGallery","document","querySelector","$2YGUk","onScroll","onToTopBtn","async","responsData","getTrendMoviesWeeks","results","responsMovies1","getRandomInt","max","Math","floor","random","length","index","push","filter","v","i","arr","indexOf","markup1","reduce","markup","responsMovies","slice","$1fLxG","getStarsRating","$0015b29ca7009732$var$createMovies","innerHTML","err","console","log","$0015b29ca7009732$var$onRenderPage","$0015b29ca7009732$var$upcomingCard","responsDataMovie","getUpcomingFilms","alert","randomNewMovie1","getRandomFilm","markupNewMovie","randomNewMovie","movieObject","addEventListener","$7aCER","addToLibrary","$0015b29ca7009732$var$onRenderNewMovie"],"version":3,"file":"index.798122fe.js.map"}